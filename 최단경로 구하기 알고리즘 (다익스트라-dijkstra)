다익스트라 알고리즘은 다이나믹 프로그래밍을 활용한 대표적인 최단경로 탐색 알고리즘 입니다.

최단 경로 알고리즘의 아이디어는 다음과 같습니다.

출발 노드와, 도착 노드를 설정
알고 있는 모든 거리 값을 부여
출발 노드부터 시작하여, 방문하지 않은 인접 노드를 방문, 거리를 계산한 다음, 현재 알고있는 거리보다 짧으면 해당 값으로 갱신한다.
현재 노드에 인접한 모든 미방문 노드까지의 거리를 계산했다면, 현재 노드는 방문한 것이므로, 미방문 집합에서 제거한다.
도착 노드가 미방문 노드 집합에서 벗어나면, 알고리즘을 종료한다.


def dijkstra():
    import heapq
    import sys
    
    V, E = map(int, input().split())
    K = int(input())
    INF = 10 * V +1
    distance = [[] for _ in range(V+1)]
    
    for _ in range(E):
        start, end, dist = map(int, sys.;stdin.readline().split())
        distance[start].appen([end, dist])
        
        
    queue = []
    K_distance = [INF for _ in range(V+1)]
    K_distance[K] = 0
    heapq.heappush(queue, [0, K])
    
    while queue:
        mid = heapq.heappop(queue)
        for end in distance[mid[1]]:
            if K_distance[end[0]] > mid[0] + end[1]:
                K_distance[end[0]] = mid[0] + end[1]
                heapq.heappush(queue, [K_distance[end[0]], end[0]])
                
                
    for i in range(1, V+1):
        if K_distance[i] == INF:
            print('INF')
        else:
            print(K_distance[i])
